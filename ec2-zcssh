#!/usr/bin/env python
from __future__ import print_function

# stdlib
import argparse
import json
import subprocess
import sys

# 3rd-party
import boto3
from termcolor import colored

__version__ = "0.2.3"

class Ec2zcssh(object):
    def __init__(self):
        self.args = None
        self.should_die = False

    def run(self):
        parser = argparse.ArgumentParser(description="Create an iTterm2 window")
        parser.add_argument(
                '-f', '--filter', 
                action='append', 
                help="Comma-separated boto3-style instance filters. Example: tag:role=db,instance-state-name=running")
        parser.add_argument(
                '-i', '--instance',
                action='append',
                help="Comma-separated list of instances to connect")
        parser.add_argument(
                '-p', '--public',
                action='store_true',
                help='Use public IPs instead of private')
        parser.add_argument(
                '-l', '--login',
                help="Alternate username to login with")
        parser.add_argument(
                '-F', '--fullscreen',
                action='store_true',
                help="Start iTerm2 in fullscreen")
        parser.add_argument(
                '--version',
                action='version',
                version='%s %s' % (sys.argv[0], __version__))
        
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
                '--die-on-warning',
                action='store_true',
                help="Die on any warning")
        group.add_argument(
                '--dry-run',
                action='store_true',
                help="Fetch IPs without executing zcssh")

        group = parser.add_mutually_exclusive_group()
        group.add_argument(
                '--verbose',
                action='store_true',
                help="More verbose output"
                )
        group.add_argument(
                '--quiet',
                action='store_true',
                help="Suppress non-error output")
        group.add_argument(
                '--silent',
                action='store_true',
                help="Suppress all output")
        group.add_argument(
                '--debug',
                action='store_true',
                help="Enable debug output")

        parser.add_argument(
                'ips',
                nargs='*',
                help='extra IPs to connect')

        self.args = parser.parse_args()
        try:
            self.validate_args()

            ips = []

            for ip in self.args.ips:
                if not ip in ips:
                    ips.append(ip)
                else:
                    self.warning('Deduplicating IP %s' % ip)

            if self.args.filter:
                instance_filters = self.process_filters(self.args.filter)
                for orig_filter, instance_filter in instance_filters.items():
                    _ips = self.fetch_ec2_ips(instance_filter=instance_filter, use_public=self.args.public)
                    if not _ips:
                        self.warning('No ips found matching filter \'%s\'' % orig_filter)
                    for ip in _ips.values():
                        if not ip in ips:
                            ips.append(ip)
                        else:
                            self.warning('WARNING: Deduplicating IP %s' % ip)

            if self.args.instance:
                instances = []
                for instance in self.args.instance:
                    instances += instance.split(",")
                _ips = self.fetch_ec2_ips(instance_ids=instances, use_public=self.args.public)
                for ip in self.args.ips:
                    if not ip in ips:
                        ips.append(ip)
                    else:
                        self.warning('WARNING: Deduplicating IP %s' % ip)

            if self.should_die:
                self.error("Exiting due to warning or error")
                sys.exit(1)

            self.ok("Found %i matching IPs:" % len(ips))
            self.info(', '.join(ips))
            if self.args.dry_run:
                self.ok("Dry-run complete")
                return

            if not self.args.dry_run and not self.should_die:
                process = subprocess.Popen(
                        self.make_cmd(ips), 
                        stdout=sys.stdout,
                        stderr=sys.stderr,
                        stdin=sys.stdin)
                process.communicate()

        except Exception as e:
            self.error(e)

    def make_cmd(self, ips):
        cmd = ['zcssh']
        if self.args.login:
            cmd.append('-l')
            cmd.append(self.args.login)
        if self.args.fullscreen:
            cmd.append('-F')
        cmd += ips
        return cmd

    def validate_args(self):
        if not self.args.ips and \
                not self.args.filter and \
                not self.args.instance:
                    self.error('ERROR: You must specify at at least one filter, instance id, or IP address')

    def process_filters(self, filters):
        instance_filters = {}
        for filter_spec in filters:
            if filter_spec in instance_filters:
                self.warning("Duplicate filter spec: %s" % filter_spec)
            filters = {  } # default to only getting running instances
            for _filter in filter_spec.split(","):
                name, values = _filter.split("=")
                values = values.split(":")
                filters[name] = filters.get(name, []) + values
            instance_filters[filter_spec] = filters
        return instance_filters

    def fetch_ec2_ips(self, instance_filter=[], instance_ids=[], use_public=False):
        ec2 = boto3.client('ec2')
        ec2_filter_spec = []
        if instance_filter:
            for name, values in instance_filter.items():
                ec2_filter_spec.append({ "Name": name, "Values": values })
        self.debug("Fetching IPs for spec: %s" % json.dumps(ec2_filter_spec, indent=2))
        _ips = {}
        next_token = ''
        while True:
            if instance_filter:
                response = ec2.describe_instances(Filters=ec2_filter_spec, NextToken=next_token)
            else:
                response = ec2.describe_instances(InstanceIds=instance_ids)
            for reservation in response['Reservations']:
                for instance in reservation['Instances']:
                    ip = instance.get('PublicIpAddress') if use_public else instance.get('PrivateIpAddress')
                    if not ip:
                        self.warning("WARNING: No IP found for instance %s" % instance.get('InstanceId'))
                        continue
                    _ips[instance.get('InstanceId')] = ip
            if not _ips:
                self.warning("WARNING: No IPs found for filter: %s" % instance_filter)
                continue
            next_token = response.get('NextToken')
            if not next_token: break
        return _ips

    def warning(self, text):
        if self.args.quiet or self.args.silent: return
        print(colored("WARNING: %s" % text, 'yellow'), file=sys.stderr)
        if self.args.die_on_warning: self.should_die = True

    def error(self, text):
        if self.args.silent: return
        print(colored("ERROR: %s" % text, 'red'), file=sys.stderr)
        self.should_die = True

    def ok(self, text):
        if self.args.quiet or self.args.silent: return
        print(colored("OK: %s" % text, 'green'))

    def info(self, text):
        if not self.args.verbose and not self.args.debug: return
        print("INFO: %s" % text)

    def debug(self, text):
        if not self.args.debug: return
        print("DEBUG: %s" % text)

if __name__ == '__main__':
    ec2zcssh = Ec2zcssh()
    ec2zcssh.run()
