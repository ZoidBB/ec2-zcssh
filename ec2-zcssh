#!/usr/bin/env python
from __future__ import print_function

import argparse
import boto3
import subprocess
import sys

class EC2ZCSSH(object):
    def run(self):
        parser = argparse.ArgumentParser(description="Create an iTterm2 window")
        parser.add_argument(
                '--filter', 
                action='append', 
                help="Comma-separated boto3-style instance filters. Example: tag:role=db,instance-state-name=running")
        parser.add_argument(
                '--instance',
                action='append',
                help="Comma-separated list of instances to connect")
        parser.add_argument(
                '--public',
                action='store_true',
                help='Use public IPs instead of private')
        parser.add_argument(
                '--login',
                help="Alternate username to login with")
        parser.add_argument(
                '--fullscreen',
                action='store_true',
                help="Start iTerm2 in fullscreen")
        parser.add_argument(
                'ips',
                nargs='*',
                help='extra IPs to connect')

        args = parser.parse_args()
        self.validate_args(args)
        
        ips = []

        for ip in args.ips:
            if not ip in ips:
                ips.append(ip)
            else:
                print('WARNING: Deduplicating IP %s' % ip)

        if args.filter:
            instance_filters = self.process_filters(args.filter)
            for instance_filter in instance_filters:
                _ips = self.fetch_ec2_ips(instance_filter=instance_filter, use_public=args.public)
                for ip in _ips:
                    if not ip in ips:
                        ips.append(ip)
                    else:
                        print('WARNING: Deduplicating IP %s' % ip)

        if args.instance:
            _ips = self.fetch_ec2_ips(instance_ids=args.instance, use_public=args.public)
            for ip in args.ips:
                if not ip in ips:
                    ips.append(ip)
                else:
                    print('WARNING: Deduplicating IP %s' % ip)

        process = subprocess.Popen(
            self.make_cmd(ips, args), 
            stdout=sys.stdout,
            stderr=sys.stderr,
            stdin=sys.stdin)
        process.communicate()

    def make_cmd(self, ips, args):
        cmd = ['zcssh']
        if args.login:
            cmd.append('-l')
            cmd.append(args.login)
        if args.fullscreen:
            cmd.append('-F')
        cmd += ips
        return cmd


    def validate_args(self, args):
        if not args.ips and \
           not args.filter and \
           not args.instance:
            print('You must specify at at least one filter, instance id, or IP address')
            sys.exit(1)

    def process_filters(self, filters):
        instance_filters = []
        for filter_spec in filters:
            filters = {  } # default to only getting running instances
            for _filter in filter_spec.split(","):
                name, values = _filter.split("=")
                values = values.split(":")
                filters[name] = filters.get(name, []) + values
            instance_filters.append(filters)
        return instance_filters

    def fetch_ec2_ips(self, instance_filter=[], instance_ids=[], use_public=False):
        ec2 = boto3.client('ec2')
        ec2_filter_spec = []
        if instance_filter:
            for name, values in instance_filter.items():
                ec2_filter_spec.append({ "Name": name, "Values": values })
        _ips = []
        next_token = ''
        while True:
            response = ec2.describe_instances(Filters=ec2_filter_spec, InstanceIds=instance_ids, NextToken=next_token)
            for reservation in response['Reservations']:
                for instance in reservation['Instances']:
                    ip = instance.get('PublicIpAddress') if use_public else instance.get('PrivateIpAddress')
                    if not ip:
                        print("WARNING: No IP found for instance %s" % instance.get('InstanceId'))
                        continue
                    _ips.append(ip)
            if not _ips:
                print("WARNING: No IPs found for filter: %s" % instance_filter)
                continue
            next_token = response.get('NextToken')
            if not next_token: break
        return _ips

if __name__ == '__main__':
    ec2zcssh = EC2ZCSSH()
    ec2zcssh.run()
